@page "/sellproduct"
@using UseCases.Interfaces

@inject IGetProductByIdUseCase GetProductByIdUseCase

@if (productToSell != null)
{
        <EditForm Model="productToSell" OnValidSubmit="SellProduct">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="form-group">
                <label for="name">Product Name</label>
                <input type="text" readonly value="@productToSell.Name" /> 
            </div>
             <div class="form-group">
                <label for="price">Price</label>
                <input id="price" readonly value="@(string.Format("{0:c}", productToSell.Price))" /> 
            </div>
            <div class="form-group">
                <label for="quantity">Quantity</label>
                <InputNumber id="quantity" @bind-Value="@productToSell.Quantity" class="form-control"/> 
            </div>
        </EditForm>
        <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private Product productToSell;
    private string errorMessage;


    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold {get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if(SelectedProduct != null)
        {
            productToSell = new Product { 
                Id = SelectedProduct.Id,
                Name = SelectedProduct.Name, 
                CategoryId = SelectedProduct.CategoryId, 
                Price = SelectedProduct.Price,
                Quantity = 0
            };
        } 
    }

    private void SellProduct()
    {
        var product = GetProductByIdUseCase.Execute(productToSell.Id);

        if(product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
        }
        else
        {
            errorMessage = $"{product.Name} has {product.Quantity} left";
        }

    }
}
